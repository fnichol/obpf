#!/usr/bin/perl -w
use strict;
use warnings;

##
# obpf - 
#
# Author: Fletcher Nichol
# $Id$
##

my $Version = "1.0.0";

use Getopt::Long;
use Pod::Usage;
use File::Basename;
use Switch;

# command line options
my %Cmd_args = ();

# configuration file parsed options
my %Conf_opts = ();

# final options hash
my %Options = ();

my $local_arch = `/usr/bin/uname -m`; chomp $local_arch;
my $local_osrev = `/usr/bin/uname -r`; chomp $local_osrev;

# default values for each option
my %Defaults = (
	"arch" => , $local_arch,
	"ftp" => "/usr/bin/ftp",
	"kernel" => , "GENERIC",
	"osrev" => $local_osrev,
	"patchdir" => "/tmp",
	"patchurl" => "/"
	);

undef $local_arch;
undef $local_osrev;

# order of and possible locations for options config files
my @CONF_LOCATIONS = ( dirname($0)."/obpf.conf", $ENV{HOME}."/.obpf", 
	"/etc/obpf.conf", "obpf.conf" );

# prefix of option environment variables
my $ENV_PREFIX = "OBPF_";

my @ACTIONS = ( "download", "install" );


MAIN: {
	&parse_opts();

	switch ($Options{action}) {
		case /^download$/ { &process_download(); }
		case /^install$/ { &process_install(); }
	}
}


sub process_download {
	print "here we go for download.\n";

	foreach my $file (@ARGV) {
		&download_file( $file );
	}
}


sub process_install {
	print "here we go for install.\n";
}

sub download_file {
	my ( $file ) = @_;

	# if the file has the form "001_mbuf"
	if ( $file =~ /^\d\d\d_.*$/ && $file !~ /\.tgz$/ ) {
		$file = "obpf-$Options{osrev}-$Options{arch}-$file";
	}

	my @sites = split( /\/:/, $Options{patchurl} );
	foreach my $site (@sites) {
		$site =~ s/\/$//;
		$site =~ s/\.tgz$//;
		print "trying $site/$file.tgz\n";

		`$Options{ftp} -V -m $site/$file.tgz`;
		if ($?) {
			print "tring $site/$file-$Options{kernel}.tgz\n";
			`$Options{ftp} -V -m $site/$file-$Options{kernel}.tgz`;
		}
	}
}

sub parse_opts {
	GetOptions(  \%Cmd_args, 
		"help|?", "man", "version", "verbose|v", "arch:s", "osrev:s",
		"kernel:s", "patchdir:s", "patchurl:s", "ftp:s",
		"download|d", "install|i" ) or pod2usage(2);

	# prints usage if --help option is specified
	pod2usage( 1 )  if ( exists $Cmd_args{help} );

	# prints a manpage if --man option is specified
	pod2usage( -verbose => 2 )  if ( exists $Cmd_args{man} );

	# load in actions into options
	my $num_actions = 0;
	foreach my $action (@ACTIONS) {
		if ( exists $Cmd_args{$action} ) {
			$Options{action} = $action;
			$num_actions++;
		}
	}

	# if no actions are defined, then exit
	pod2usage("$0: no action given." )  if ( $num_actions == 0 );

	# if multiple actions are defined, then exit
	pod2usage("$0: multiple actions given." )  if ( $num_actions > 1 );

	&parse_config_files();

	# Load in option values
	foreach my $option (keys %Defaults) {
		my $env = uc( "$ENV_PREFIX$option" );

		if ( exists $ENV{$env} ) {
			# Look for environment variable options (e.g. OBPF_OPTION)
			$Options{$option} = $ENV{$env};
		}
		elsif ( exists $Cmd_args{$option} ) {
			# Look for command line options (e.g --OPTION=something)
			$Options{$option} = $Cmd_args{$option};
		}
		elsif ( exists $Conf_opts{$option} ) {
			# Look for configuration file options (e.g. OPTION=something)
			$Options{$option} = $Conf_opts{$option};
		}
		else {
			# Otherwise use the builtin default
			$Options{$option} = $Defaults{$option};
		}
		print ">>var $option=[$Options{$option}]\n";
	}
}


sub parse_config_files {
	foreach my $conf_file ( @CONF_LOCATIONS ) {
		open( CONF, "<$conf_file" ) || next;

		while (<CONF>) {
			chomp;

			# strip out all comment and blank lines
			s/^#.*$//; s/\s+#.*$//; s/^\s*//; s/\s*$//;
			next if /^$/;

			# capture config value if it is valid
			if ( /(\w+)\s*=\s*(.+)/  && exists $Defaults{$1} ) {
				$Conf_opts{$1} = $2;
			}
		}
	}
}


__END__


=head1 NAME

obpf - 

=head1 SYNOPSIS

B<obpf> [B<-v>] [B<--version>] [B<--ftp>=I<FILE>] [B<--patchurl>=I<URL>]

=head1 DESCRIPTION

B<obpf> .

=head1 OPTIONS

=over 4

=item B<--arch>=I<ARCH>

overrides the system architecture used when fetching patches.

=item B<--download>, B<-d>

downloads patches. Patches are downloaded to /tmp or to I<patchdir>, if set.

=item B<--install>, B<-i>

downloads and installs patches. Patches are downloaded to /tmp or to 
I<patchdir>, if set.

=item B<--ftp>=I<FILE>

path to the ftp command.

=item B<--kernel>=I<KERNEL>

sets the kernel configuration of the patch to download. Default is GENERIC.

=item B<--osrev>=I<VER>

overrides the version of OpenBSD used when fetching patches.

=item B<--patchdir>=I<DIR>

sets the directory to which patches are downloaded. The default is /tmp.

=item B<--patchurl>=I<URL>

tries to download the patches from this I<URL> or from a list of I<URL>s
seperated by spaces. Any I<URL> of starting with /, ftp://, http:// or https://
can be used.

=item B<--verbose>, B<-v>

shows more verbose output.

=item B<--version>

displays the version of the program

=back

=head1 EXAMPLES

.

=head1 ENVIRONMENT VARIABLES

=over 4

=item B<OBPF_FTP>

see B<--ftp> option.

=item B<OBPF_PATCHURL>

see B<--patchurl> option.

=back

=head1 AUTHOR

Fletcher Nichol
