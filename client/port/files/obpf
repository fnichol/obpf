#!/usr/bin/perl -w
use strict;
use warnings;

##
# obpf - 
#
# Author: Fletcher Nichol
# $Id$
##

my $Version = "1.0.0";
my $Is_verbose = 0;

use Getopt::Long;
use Pod::Usage;
use File::Basename;
use File::Temp qw/ tempfile tempdir /;
use Switch;

# command line options
my %Cmd_args = ();

# configuration file parsed options
my %Conf_opts = ();

# final options hash
my %Options = ();

# is a reboot required after install (is there a kernel patch involved)?
my $Is_reboot_needed = 0;

my $local_arch = `/usr/bin/uname -m`; chomp $local_arch;
my $local_osrev = `/usr/bin/uname -r`; chomp $local_osrev;

# default values for each option
my %Defaults = (
	"arch" => , $local_arch,
	"db" => "/var/obpf",
	"ftp" => "/usr/bin/ftp",
	"kernel" => , "GENERIC",
	"md5" => "/bin/md5",
	"osrev" => $local_osrev,
	"patchdir" => "/tmp",
	"patchurl" => "/",
	"root" => "",
	"tar" => "/bin/tar"
	);

undef $local_arch;
undef $local_osrev;

# order of and possible locations for options config files
my @CONF_LOCATIONS = ( dirname($0)."/obpf.conf", $ENV{HOME}."/.obpf", 
	"/etc/obpf.conf", "obpf.conf" );

# prefix of option environment variables
my $ENV_PREFIX = "OBPF_";

my @ACTIONS = ( "download", "install", "read", "plist" );


MAIN: {
	&parse_opts();

	switch ($Options{action}) {
		case /^download$/ { &process_download(); }
		case /^install$/ { &process_install(); }
		case /^read$/ { &process_read(); }
		case /^plist$/ { &process_plist(); }
	}
}


sub process_download {
	my $all_success = 1;

	foreach my $token (@ARGV) {
		#
		# if the patch is already installed in the db, then skip the download,
		# unless we are forcing the download
		#
		my $installed = &find_installed_patch( $token );
		if ( $installed && ! exists $Cmd_args{force} ) {
			print "Patch $token is already installed\n";
			next;
		}

		#
		# if we aren't forcing the download and the file exists, then we can
		# consider this success
		#
		my $dest = find_fetched_file( $token );
		if ( $dest && ! exists $Cmd_args{force} ) {
			print "File already exists: $dest\n";
			next;
		}

		if ( ! &download_token( $token ) ) {
			$all_success = 0;
		}
	}

	if ( ! $all_success ) {
		print "Download summary: there were some failures.\n";
	}

	return $all_success;
}


sub process_install {
	my $all_success = 1;

	foreach my $token (@ARGV) {
		my $installed = &find_installed_patch( $token );
		my $fetched = find_fetched_file( $token );

		# if the patch is already installed, then skip
		if ( $installed ) {
			print "Patch $token is already installed, skipping.\n";
			next;
		}

		#
		# if the patch is installed (and download is not forced), then read
		# from the installed patchfile
		#
		if ( ! $fetched || exists $Cmd_args{force} ) {
			$fetched = &download_token( $token );
		}

		# if the patch has been downloaded, then read from the tar blob
		if ( $fetched && &verify_tar_md5s( $fetched, $token ) ) {
			print "Installing patch $token\n";
			if ( ! &install_patch( $fetched, $token ) ) { $all_success = 0; }
			next;
		}

		# if we get this far, we could not determine the patchfile from anywhere
		print "Patch $token could not be found.\n";
		$all_success = 0;
	}

	if ( ! $all_success ) {
		print "Install summary: there were some failures.\n";
	}

	if ( $Is_reboot_needed ) {
		print "\nOne or more of these patches was a kernel patch.\n";
		print "Please restart the system for the patch to take effect.\n";
	}

	return $all_success;
}


sub process_read {
	my $all_success = 1;

	foreach my $token (@ARGV) {
		my $installed = &find_installed_patch( $token );
		my $fetched = find_fetched_file( $token );

		#
		# if the download is not forced, and the patch is not installed nor
		# fetched, then force a download of the patch
		#
		if ( exists $Cmd_args{force} || ( ! $installed && ! $fetched ) ) {
			$fetched = &download_token( $token );
		}

		#
		# if the patch is installed (and download is not forced), then read
		# from the installed patchfile
		#
		if ( $installed && &verify_installed_md5s( $token ) &&
				! exists $Cmd_args{force} ) {
			print "Instructions for installed patch $token\n";
			&read_patchfile( $installed, $token );
			next;
		}

		# if the patch has been downloaded, then read from the tar blob
		if ( $fetched && &verify_tar_md5s( $fetched, $token ) ) {
			print "Instructions for downloaded patch $token\n";
			&read_extracted_patchfile( $fetched, $token );
			next;
		}

		# if we get this far, we could not read the patchfile from anywhere
		print "Patch $token could not be found.\n";
		$all_success = 0;
	}

	if ( ! $all_success ) {
		print "Read summary: there were some failures.\n";
	}

	return $all_success;
}


sub process_plist {
	my $all_success = 1;

	foreach my $token (@ARGV) {
		my $installed = &find_installed_patch( $token );
		my $fetched = find_fetched_file( $token );

		#
		# if the download is not forced, and the patch is not installed nor
		# fetched, then force a download of the patch
		#
		if ( exists $Cmd_args{force} || ( ! $installed && ! $fetched ) ) {
			$fetched = &download_token( $token );
		}

		#
		# if the patch is installed (and download is not forced), then read
		# from the installed patchfile
		#
		if ( $installed && &verify_installed_md5s( $token ) && 
				! exists $Cmd_args{force} ) {
			print "Plist for installed patch $token\n";
			&read_plist( $installed, $token );
			next;
		}

		# if the patch has been downloaded, then read from the tar blob
		if ( $fetched && &verify_tar_md5s( $fetched, $token ) ) {
			print "Plist for downloaded patch $token\n";
			&read_extracted_plist( $fetched, $token );
			next;
		}

		# if we get this far, we could not read the patchfile from anywhere
		print "Patch $token could not be found.\n";
		$all_success = 0;
	}

	if ( ! $all_success ) {
		print "Plist summary: there were some failures.\n";
	}

	return $all_success;
}


sub install_patch {
	my ( $tarfile, $token ) = @_;

	my ( $tempdir ) = &extract_temp_tar( $tarfile );
	my ( $packfile ) = glob("$tempdir/*/pack.tgz");

	my $args = "xpfz";
	if ( $Is_verbose ) { $args .= "v"; }

	system( "$Options{tar} $args $packfile -C $Options{root}/" );
	if ( $? >> 8 != 0 ) {
		die("Cannot extract patch from $tarfile into $Options{root}/");
	}

	system( "$Options{tar} xfz $tarfile -C $Options{root}$Options{db}" );
	if ( $? >> 8 != 0 ) {
		die("Cannot add patch $token into database $Options{root}$Options{db}");
	}


	# check if patch is a kernel patch
	if ( &plist_contains( glob("$tempdir/*/*.plist"), "./bsd" ) ) {
		$Is_reboot_needed = 1;
	}

	return 1;
}


sub download_token {
	my ( $token ) = @_;

	my @sites = split( /\/:/, $Options{patchurl} );

	foreach my $site (@sites) {
		# strip out any trailing slash on site
		$site =~ s/^(.+)\/$/$1/;

		my $fetch_success = 0;
		my $tarfile = "";
		if ( $site =~ /^\// ) {
			$tarfile = 
				&get_file( $token, $site, "/bin/cp #SOURCE# #DEST#" );
		}
		else {
			$tarfile = 
				&get_file( $token, $site, "$Options{ftp} -V -m #SOURCE#" );
		}

		if ( $tarfile ) {
			print "Patch $token download success.\n";
			return $tarfile;
		}
	}

	print "Patch $token download not successful.\n";
	return undef;
}


sub get_file {
	my ( $file, $site, $fetch_str ) = @_;

	foreach my $guess ( &make_fetch_guess_list($file) ) {
		my $dest = "$Options{patchdir}/$guess";

		# determine the final fetch command to be executed
		my $fetch_cmd = $fetch_str;
		$fetch_cmd =~ s/#SOURCE#/$site\/$guess/g;
		$fetch_cmd =~ s/#DEST#/$dest/g;

		print "Trying $site/$guess ...\n";

		# run the command to fetch the file
		system( "cd $Options{patchdir}; $fetch_cmd" );

		# if the exit value of the fetch command was 0, then success
		if ( $? >> 8 == 0 ) {
			return $dest;
		}
	}

	# if all attempts have failed, then return false
	return undef;
}


sub make_fetch_guess_list {
	my ( $file ) = @_;

	my @guesses = ( 
		"obpf-$Options{osrev}-$Options{arch}-$file.tgz", 
		"obpf-$Options{osrev}-$Options{arch}-$file-$Options{kernel}.tgz" );

	#
	# if $file is the fully qualified path name, then add it to the front
	# of the list of file guesses
	#
	if ( $file =~ /^obpf-$Options{osrev}-$Options{arch}-\d{3}_.+\.tgz$/ ) {
		@guesses = ( $file, @guesses );
	}

	return @guesses;
}


sub make_installed_guess_list {
	my ( $file ) = @_;

	my @guesses = ( "$file", "$file-$Options{kernel}" );

	#
	# if $file is the fully qualified path name, then add it to the front
	# of the list of file guesses
	#
	if ( $file =~ /^obpf-$Options{osrev}-$Options{arch}-(\d{3}_.+)\.tgz$/ ) {
		@guesses = ( $1, @guesses );
	}

	return @guesses;
}


sub find_fetched_file {
	my ( $token ) = @_;

	# try to find a previously downloaded version of the $token
	foreach my $guess ( &make_fetch_guess_list($token) ) {
		if ( -r "$Options{patchdir}/$guess" ) {
			return "$Options{patchdir}/$guess";
		}
	}

	# if we haven't found the file by now, it ain't here
	return undef;
}


sub find_installed_patch {
	my ( $token ) = @_;

	# try to find a previously downloaded version of the $file
	foreach my $guess ( &make_installed_guess_list($token) ) {
		if ( -d "$Options{root}$Options{db}/$guess" ) {
			return "$Options{root}$Options{db}/$guess";
		}
	}

	# if we haven't found the file by now, it ain't here
	return undef;
}


sub read_patchfile {
	my ( $dir, $token ) = @_;

	my ( $patchfile ) = glob("$dir/*.patch");
	open( PATCHFILE, "<$patchfile" ) or die("Cannot open patchfile $patchfile");

	print "=" x 40 . "\n\n";

	while (<PATCHFILE>) {
		if ( /^Index:\s.+$/ ) { last; }
		else { print "$_"; }
	}

	print "-" x 40 . "\n\n";

	close( PATCHFILE );
}


sub read_plist {
	my ( $dir, $token ) = @_;

	my ( $plist ) = glob("$dir/*.plist");
	open( PLIST, "<$plist" ) or die("Cannot open plist $plist");

	print "=" x 40 . "\n\n";

	while (<PLIST>) { print; } 

	print "-" x 40 . "\n\n";

	close( PLIST );
}


sub read_extracted_patchfile {
	my ( $tarfile, $token ) = @_;

	my ( $tempdir ) = &extract_temp_tar( $tarfile );

	&read_patchfile( glob("$tempdir/*"), $token );
}


sub read_extracted_plist {
	my ( $tarfile, $token ) = @_;

	my ( $tempdir ) = &extract_temp_tar( $tarfile );

	&read_plist( glob("$tempdir/*"), $token );
}


sub verify_installed_md5s {
	my ( $token ) = @_;

	my $installed = &find_installed_patch( $token );
	if ( ! $installed ) { 
		die("The patch $token is not installed and cannot be verified.");
	}

	my $quiet = "";
	if ( ! $Is_verbose ) {
		$quiet = "-q";
	}

	print ">> Checking hash integrity of $token ...\n"  if ( $Is_verbose );

	system( "cd $installed && md5 $quiet -c *.md5" );
	if ( $? >> 8 != 0 ) {
		die("One of the hashes in $token could not be properly verified.");
	}

	if ( $? >> 8 == 0 ) {
		print ">> Hash integrity has passed for $token.\n"  if ( $Is_verbose );
		return 1;
	}
	else {
		return undef;
	}
}


sub verify_tar_md5s {
	my ( $tarfile, $token ) = @_;

	my ( $tempdir ) = &extract_temp_tar( $tarfile );

	my $quiet = "";
	if ( ! $Is_verbose ) {
		$quiet = "-q";
	}

	print ">> Checking hash integrity of $token ...\n"  if ( $Is_verbose );

	system( "cd $tempdir/* && md5 $quiet -c *.md5" );
	if ( $? >> 8 != 0 ) {
		die("One of the hashes in $token could not be properly verified.");
	}

	if ( $? >> 8 == 0 ) {
		print ">> Hash integrity has passed for $token.\n"  if ( $Is_verbose );
		return 1;
	}
	else {
		return undef;
	}
}


sub extract_temp_tar {
	my ( $tarfile ) = @_;

	my ( $tempdir ) = 
		tempdir( "$Options{patchdir}/obpf_tempXXXXXX", CLEANUP => 1 );

	system( "$Options{tar} xfz $tarfile -C $tempdir" );
	if ( $? >> 8 != 0 ) {
		die("Cannot extract $tarfile into $tempdir");
	}

	return $tempdir;
}


sub parse_opts {
	GetOptions(  \%Cmd_args, 
		"help|?", "man", "version", "verbose|v", "force|f", 
		"arch:s", "osrev:s", "kernel:s", "patchdir:s", "patchurl:s", "ftp:s", 
		"root:s", "tar:s", "db:s", "md5:s",
		"download|d", "install|i", "read|r", "plist|p" ) or pod2usage(2);

	if ( exists $Cmd_args{version} ) {
		print "obpf version $Version.\n";
		exit;
	}

	$Is_verbose = 1  if ( exists $Cmd_args{verbose} );

	# prints usage if --help option is specified
	pod2usage( 1 )  if ( exists $Cmd_args{help} );

	# prints a manpage if --man option is specified
	pod2usage( -verbose => 2 )  if ( exists $Cmd_args{man} );

	# load in actions into options
	my $num_actions = 0;
	foreach my $action (@ACTIONS) {
		if ( exists $Cmd_args{$action} ) {
			$Options{action} = $action;
			$num_actions++;
		}
	}

	# if no actions are defined, then exit
	pod2usage("$0: no action given." )  if ( $num_actions == 0 );

	# if multiple actions are defined, then exit
	pod2usage("$0: multiple actions given." )  if ( $num_actions > 1 );

	&parse_config_files();

	print "===== Runtime Options ==\n"  if ( $Is_verbose );

	# Load in option values
	foreach my $option (keys %Defaults) {
		my $env = uc( "$ENV_PREFIX$option" );

		if ( exists $ENV{$env} ) {
			# Look for environment variable options (e.g. OBPF_OPTION)
			$Options{$option} = $ENV{$env};
		}
		elsif ( exists $Cmd_args{$option} ) {
			# Look for command line options (e.g --OPTION=something)
			$Options{$option} = $Cmd_args{$option};
		}
		elsif ( exists $Conf_opts{$option} ) {
			# Look for configuration file options (e.g. OPTION=something)
			$Options{$option} = $Conf_opts{$option};
		}
		else {
			# Otherwise use the builtin default
			$Options{$option} = $Defaults{$option};
		}

		print ">> Option $option=[$Options{$option}]\n"  if ( $Is_verbose );
	}

	print "========================\n\n"  if ( $Is_verbose );
}


sub parse_config_files {
	foreach my $conf_file ( @CONF_LOCATIONS ) {
		open( CONF, "<$conf_file" ) || next;

		while (<CONF>) {
			chomp;

			# strip out all comment and blank lines
			s/^#.*$//; s/\s+#.*$//; s/^\s*//; s/\s*$//;
			next if /^$/;

			# capture config value if it is valid
			if ( /(\w+)\s*=\s*(.+)/  && exists $Defaults{$1} ) {
				$Conf_opts{$1} = $2;
			}
		}
	}
}


sub plist_contains {
	my ( $file, $line ) = @_;

	open( FILE, "<$file" ) or die("Cannot open $file for file_contains()");
	while (<FILE>) {
		chomp;
		if ( /^$line$/ ) {
			close( FILE );
			return 1;
		}
	}

	# if we get this far, we didn't match $regex
	close( FILE );
	return undef;
}

__END__


=head1 NAME

obpf - 

=head1 SYNOPSIS

B<obpf> [I<OPTION> I<...>] I<ACTION> I<TOKENS> [I<...>]

=head1 DESCRIPTION

B<obpf> .

=head1 ACTIONS

=over 4

=item B<--download>, B<-d>

downloads patches. Patches are downloaded to /tmp or to I<patchdir>, if set.

=item B<--install>, B<-i>

downloads and installs patches. Patches are downloaded to /tmp or to 
I<patchdir>, if set.

=item B<--read>, B<-r>

displays the patch readme section. The readme is read from the patchfile of
the installed patch, a previously downloaded patch, or a freshly downloaded
patch depending on the context. To force an up-to-date readme, see 
the I<--force> argument.

=item B<--plist>, B<-p>

displays the patch plist file. The plist is read from the plist file of
the installed patch, a previously downloaded patch, or a freshly downloaded
patch depending on the context. To force an up-to-date plist, see 
the I<--force> argument.

=back

=head1 OPTIONS

=over 4

=item B<--arch>=I<ARCH>

overrides the system architecture used when fetching patches.

=item B<--db>=I<DIR>

root of the obpf database. The default is /var/obpf.

=item B<--force>, B<-f>

forces the download to proceed even if the patch has been previously downloaded.

=item B<--ftp>=I<FILE>

path to the ftp command. Default is /usr/bin/ftp.

=item B<--help>, B<-?>

displays a help usage

=item B<--kernel>=I<KERNEL>

sets the kernel configuration of the patch to download. Default is GENERIC.

=item B<--man>

displays the full manpage for this program

=item B<--md5>=I<FILE>

path to the md5 command. Default is /bin/md5.

=item B<--osrev>=I<VER>

overrides the version of OpenBSD used when fetching patches.

=item B<--patchdir>=I<DIR>

sets the directory to which patches are downloaded. The default is /tmp.

=item B<--patchurl>=I<URL>

tries to download the patches from this I<URL> or from a list of I<URL>s
seperated by spaces. Any I<URL> of starting with /, ftp://, http:// or https://
can be used.

=item B<--root>=I<DIR>

sets an alternate root system directory when applying patches

=item B<--tar>=I<FILE>

path to the tar command. Default is /bin/tar.

=item B<--verbose>, B<-v>

shows more verbose output.

=item B<--version>

displays the version of the program

=back

=head1 EXAMPLES

.

=head1 ENVIRONMENT VARIABLES

=over 4

=item B<OBPF_FTP>

see B<--ftp> option.

=item B<OBPF_PATCHURL>

see B<--patchurl> option.

=back

=head1 AUTHOR

Fletcher Nichol
